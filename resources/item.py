
from flask.views import MethodView
from flask_smorest import Blueprint, abort
from flask_jwt_extended import jwt_required

from models import ItemModel
from db import db
from sqlalchemy.exc import SQLAlchemyError

from schemas import ItemSchema, ItemUpdateSchema

blp = Blueprint("items", __name__, description="Item operations")


@blp.route("/item/<int:item_id>")
class Item(MethodView):

    @jwt_required()
    @blp.response(200, ItemSchema) # this is the response that we are going to return, the 200 is the status code, and the 
    # ItemSchema is the schema that we are going to use to serialize the data. It includes id, name, price, store_id information.
    def get(self, item_id):
        item = ItemModel.query.get_or_404(item_id)
        return item
# With Flask SQLAlchemy, we get this query attribute, which is really handy because now we can do ItemModel.query.get_or_404
# and we can grab the item_id. And then we can just return item. This does everything for us.
# It retrieves the item from the database using the item's primary key.
    @jwt_required()
    def delete(self, item_id):
            # try:
            #     del items[item_id]
            #     return {"message": "Item deleted."}
            # except KeyError:
            #     abort(404, message="Item not found.")
        item = ItemModel.query.get_or_404(item_id)
        db.session.delete(item)
        db.session.commit()
        return {"message": "Item deleted."}

   # The order of the decorators is important. The first one is the one that is going to be executed first.
   # Make sure to put the response decorator deeper in the nesting of decorators than the arguments decorator.
    @jwt_required()
    @blp.arguments(ItemUpdateSchema)
    @blp.response(200, ItemSchema)
    def put(self, item_data, item_id):
            # try:
            #     item = items[item_id]
            #     item |= item_data
            #     return item
            
            # except KeyError:
            #     abort(404, message="Item not found.")

        item = ItemModel.query.get(item_id)
        if item: # item varsa güncelle değerleri
            item.name = item_data["name"]
            item.price = item_data["price"]
        else: # item yoksa yeni bir item yarat
            item = ItemModel(id=item_id, **item_data) # item_data'dan name price ve store_id gelecek. id ise item_id olmalı

        db.session.add(item)
        db.session.commit()

        return item
        

@blp.route("/item")
class ItemList(MethodView):
    @jwt_required()
    @blp.response(200, ItemSchema(many=True)) # with many=True, we are telling marshmallow that we are going to have a list of items. 
    # It returns a list of dictionaries, and each dictionary is an item.
    # then all we have to do is return items.values().
    def get(self):
        return ItemModel.query.all()

    @jwt_required()
    @blp.arguments(ItemSchema)
    @blp.response(201, ItemSchema)
    def post(self, item_data):
        # this second item_data is going to contain JSON, which is the validated fields that the Schema requested.
        # the JSON that the client sends ispassed through the ItemSchema, it checks that the fields are there and they're the valid types
        # and then it gives the method, an argument, which is the validated dictionary.
        # So we can delete "item_data = request.get_json()" and replace it with this argument.

            # for item in items.values():
            #     if (
            #         item_data["name"] == item["name"]
            #         and item_data["store_id"] == item["store_id"]
            #     ):
            #         abort(400, message=f"Item already exists.")

            # item_id = uuid.uuid4().hex
            # item = {**item_data, "id": item_id}
            # items[item_id] = item

        item = ItemModel(**item_data) #It's going to turn the dictionary into keyword arguments. So any data that we receive from 
        #Insomnia or the client, we're gonna turn into keyword arguments and we're gonna pass it to ItemModel.

        #item_data should include the name of the item, the price, and the store ID.(id generated by the database)

        try:
            db.session.add(item)
            db.session.commit()
        except SQLAlchemyError:
            abort(500, message="An error occurred while creating the item.")
                        
        return item
